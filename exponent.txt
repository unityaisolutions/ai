# AI Chatbot - Next.js Chat SDK

## Project Overview
This is a modern AI chatbot application built with Next.js 15 and the AI SDK. It's designed as a comprehensive chat interface with support for multiple AI models, file attachments, artifacts (documents/code/images/sheets), and real-time streaming responses. The application uses Vercel's AI Gateway for model access and includes sophisticated features like message editing, voting, and document collaboration.

## Core Technologies & Frameworks
- **Next.js 15** (App Router, React Server Components, Server Actions)
- **React 18** with TypeScript
- **AI SDK** (v5.0.26) - Unified interface for AI models with streaming support
- **Vercel AI Gateway** - Model routing and access management
- **NextAuth.js** (v5.0.0-beta) - Authentication with guest and regular user support
- **Drizzle ORM** - Type-safe database operations with PostgreSQL
- **Tailwind CSS** + **shadcn/ui** - Modern component library and styling
- **Framer Motion** - Animations and transitions
- **Radix UI** - Accessible component primitives

## Project Structure

### App Directory (`app/`)
- `(auth)/` - Authentication routes and configuration
  - `auth.ts` - NextAuth configuration with credentials and guest providers
  - `login/` & `register/` - Authentication pages
- `(chat)/` - Main chat interface (route group)
  - `page.tsx` - Chat homepage with model selection
  - `chat/[id]/` - Individual chat sessions
  - `layout.tsx` - Chat layout with sidebar and data stream provider
- `api/` - API routes for chat, files, auth, documents, etc.

### Components (`components/`)
- **Core Chat Components:**
  - `chat.tsx` - Main chat container with message handling
  - `multimodal-input.tsx` - Input component with file upload and model selection
  - `messages.tsx` - Message list with streaming support
  - `message.tsx` - Individual message component with editing/voting
- **Artifact System:**
  - `artifact.tsx` - Document/code/image/sheet viewer and editor
  - `code-editor.tsx`, `text-editor.tsx`, `sheet-editor.tsx` - Specialized editors
- **UI Components:** shadcn/ui components in `ui/` directory
- **Elements:** Reusable chat elements in `elements/` directory

### Library (`lib/`)
- **AI Integration:**
  - `ai/models.ts` - Model definitions and configurations
  - `ai/providers.ts` - AI provider setup with gateway integration
  - `ai/tools/` - AI tools for document creation, weather, suggestions
- **Database:**
  - `db/schema.ts` - Drizzle schema definitions
  - `db/queries.ts` - Database query functions
  - `db/migrations/` - Database migration files
- **Core Utilities:**
  - `types.ts` - TypeScript type definitions
  - `utils.ts` - Utility functions
  - `constants.ts` - Application constants

### Artifacts (`artifacts/`)
- Server-side artifact handling and document management
- Support for text, code, image, and sheet artifacts

## Key Features & Patterns

### AI Model Integration
- **Multi-model support:** Sonoma Dusk Alpha, Grok 4 Fast Reasoning, Image Generation
- **Streaming responses** with real-time UI updates
- **Tool calling** for weather, document creation, and suggestions
- **Reasoning model** with chain-of-thought capabilities

### Authentication System
- **Dual authentication:** Regular users with credentials + Guest users
- **Session management** with NextAuth.js
- **Middleware protection** for routes

### Database Schema
- **Users, Chats, Messages** with proper relationships
- **Document system** with versioning (id + createdAt composite key)
- **Voting system** for message feedback
- **Suggestions** for document collaboration
- **Migration system** with deprecated schema support

### Real-time Features
- **Streaming responses** with data stream provider
- **Live message updates** during generation
- **Artifact updates** in real-time
- **Usage tracking** and context management

### File Handling
- **Multimodal input** with drag-and-drop support
- **File upload** to Vercel Blob storage
- **Image attachments** with preview
- **Document processing** for various formats

## Build & Development

### Scripts
- `pnpm dev` - Development server with Turbo
- `pnpm build` - Production build (includes DB migration)
- `pnpm db:migrate` - Run database migrations
- `pnpm db:studio` - Open Drizzle Studio
- `pnpm test` - Run Playwright E2E tests
- `pnpm lint` - Code linting with Ultracite/Biome

### Environment Setup
- Requires PostgreSQL database (Neon recommended)
- Vercel AI Gateway configuration
- NextAuth secret and providers
- File storage (Vercel Blob)

## Testing Framework
- **Playwright** for E2E testing
- **Test fixtures** for authentication and page objects
- **Mock providers** for AI models in test environment
- **Comprehensive test coverage** for chat functionality, artifacts, authentication

## Code Patterns & Conventions

### Component Architecture
- **Server Components** for data fetching and static content
- **Client Components** for interactive features
- **Custom hooks** for state management (useChat, useArtifact, etc.)
- **Memoization** for performance optimization

### State Management
- **SWR** for server state and caching
- **React hooks** for local state
- **Context providers** for global state (DataStream, Theme)
- **Local storage** for user preferences

### Type Safety
- **Strict TypeScript** configuration
- **Zod schemas** for runtime validation
- **Drizzle ORM** for type-safe database operations
- **AI SDK types** for message and tool definitions

### Styling Approach
- **Tailwind CSS** with custom configuration
- **CSS variables** for theming (light/dark mode)
- **Component variants** with class-variance-authority
- **Responsive design** with mobile-first approach

## Specific Challenges & Complexities

### Message System Migration
- **Dual schema support** for backward compatibility
- **Message parts** vs deprecated content structure
- **Vote system** migration with foreign key constraints

### Streaming Architecture
- **Complex data streaming** with multiple data types
- **Real-time artifact updates** during generation
- **Error handling** for stream interruptions
- **Memory management** for long conversations

### Authentication Complexity
- **Guest user system** with automatic creation
- **Session persistence** across page reloads
- **Middleware routing** with complex path matching
- **OIDC integration** for Vercel deployments

### Artifact System
- **Multi-format support** (text, code, images, sheets)
- **Real-time collaboration** with suggestions
- **Version management** with composite keys
- **Editor integration** with CodeMirror and ProseMirror

### Performance Considerations
- **Partial Prerendering (PPR)** experimental feature
- **Component memoization** for expensive renders
- **Infinite scrolling** for chat history
- **Optimistic updates** for better UX

## Development Notes
- Uses **pnpm** as package manager
- **Biome** for linting and formatting (extends Ultracite config)
- **Vercel deployment** optimized with specific configurations
- **Experimental features** enabled (PPR, throttling)
- **Instrumentation** for observability and monitoring